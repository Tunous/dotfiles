"
"                  ___   _____(_)_______ ___ _______________
"                  __ | / /__  / __  __ `__ \__  ___/_  ___/
"                  __ |/ / _  /  _    / / / / /_/    / /__
"                  _____/  /_/   /_/ /_/ /_/ /_/     \___/
"
" Plugins -----------------------------------------------------------------
" Vundle {{{

" It's required to turn file type off to make vundle work propetly
filetype off

" Set correct path for bundles
set rtp+=$VIM/vimfiles/bundle/vundle
call vundle#rc('$VIM/vimfiles/bundle/')

Bundle 'gmarik/vundle'

"}}}
" Fugitive {{{

" Use git inside of vim
Bundle 'tpope/vim-fugitive'

" }}}

" Airline {{{

" Nice looking statusline
Bundle 'bling/vim-airline'

" Symbols {{{

let g:airline_powerline_fonts = 1      " Poweline fonts
let g:airline_left_sep = ''           " Left separator
let g:airline_right_sep = ''          " Right separator
let g:airline_left_alt_sep = ''       " Alternative left separator
let g:airline_right_alt_sep = ''      " Alternative right separator

"}}}

" Show buffers line when there is only one tab open
let g:airline#extensions#tabline#enabled = 1

"}}}

Bundle 'flazz/vim-colorschemes'

" Formatting --------------------------------------------------------------{{{

" Easy commenting of selected lines
Bundle 'scrooloose/nerdcommenter'

" Automatically close quotes, brackets, etc.
Bundle 'Raimondi/delimitMate'

" Line up text
Bundle 'godlygeek/tabular'

"}}}
" Navigation {{{

" Move lines by holding alt
Bundle 'matze/vim-move'

" Go to matching header/source file
Bundle 'a.vim'

"}}}

" Actual settings ---------------------------------------------------------
" Main settings {{{

filetype plugin indent on
syntax on
language messages en_US.utf-8
set nocompatible
set encoding=utf-8

"}}}
" Theme settings {{{

set guifont=Inconsolata-dz_for_Powerline:h9:cEASTEUROPE  " Inconsolata font

set background=dark         " Set dark background
colorscheme customized      " Use my own theme

"}}}

" Set options {{{

" Gui options {{{

if has("gui_running")
  set guioptions= " I don't want any guioptions
endif

"}}}
" Smart scrolling {{{

set scrolloff=10          " Minimal number of screen lines to keep above or below cursor
set sidescrolloff=15      " Minimal number od screen linw to keep above or below cursor

"}}}
" Search options {{{

set hlsearch        " Highlight search terms
set incsearch       " Show search matches as I type
set ignorecase      " Ignore case when searching...
set smartcase       " unless I use uppercase characters

"}}}
" Mouse {{{

if has("moouse")
  set mouse=a         " Can use mouse in all modes
endif

"}}}
" Tabs and spaces {{{

set tabstop=4          " Number of spaces for tab
set shiftwidth=2       " Number of spaces to use for indenting
set softtabstop=2      " Number of spaces that tab count's for
set expandtab          " Use spaces instead of tabs
set autoindent         " Always set autoindenting on
set copyindent         " Copy the previous indentation on autoindenting

"}}}
" Bakcup and swap files {{{

silent execute '!mkdir "'.$VIMRUNTIME.'/temp"'
silent execute '!del "'.$VIMRUNTIME.'/temp/*~"'
set backupdir=$VIMRUNTIME/temp//
set directory=$VIMRUNTIME/temp//

"}}}
" Other {{{

set wildmenu

set autoread                                " Read file if it was modified outside of vim
set autowrite                               " Writie file after executing specific commands
set autochdir                               " Automatically change working directory to directory of current file

set hidden                                  " Allow not saved buffers in background

set clipboard=unnamed                       " Share system clipboard
set showcmd                                 " Show executed command in commands line

set cursorcolumn                            " Highlight cursor column...
set cursorline                              " ...and line

set backspace=indent,eol,start              " Make backspace delete everything in insert mode
set number                                  " Show line numbers relative to current psition

set laststatus=2                            " Always show statusline
set visualbell                              " Don't beep

set nowrap                                  " Don't wrap lines

set nolist
set listchars=tab:\ ,eol:¬

set lines=50
set columns=175

set foldmethod=marker

"}}}"

"}}}
" Key mappings {{{

" Leader {{{

let mapleader="," " Use ',' as leader

" Pressing leader 2 times inserts it as normal character
inoremap <leader><leader> <leader>

"}}}

" Nvigation {{{

" Chamge windows
noremap <Up> <C-W>k
noremap <Down> <C-W>j
noremap <Left> <C-W>h
noremap <Right> <C-W>l

" Don't use arrow keys
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>

" Scroll page
noremap <Space> <C-D>
noremap <S-Space> <C-U>

"}}}
" Smart semicolon and function braces {{{

inoremap <leader>; <C-o>A;
inoremap <leader>} <C-o>A {<Return>}<C-o>k<C-o>o
inoremap <leader>{ <C-o>A {<Return>}<C-o>k<C-o>o

"}}}
" 'jk' to leave insert mode {{{

inoremap jk <Esc>
inoremap <Esc> Ooops, use jk instead...

"}}}
" Open vimrc file {{{

nnoremap <leader>ve  :edit $VIM/vimfiles/vimrc<CR>
nnoremap <leader>vs  :split $VIM/vimfiles/vimrc<CR>
nnoremap <leader>vv  :vsplit $VIM/vimfiles/vimrc<CR>

"}}}
" Other {{{

" Turn off highlighting for current search
nnoremap <C-L> :nohlsearch<CR>

" Indend whole file and remove trailing spaces
nnoremap <F2> :call Preserve("normal gg=G")<CR> :call Preserve("%s/\\s\\+$//e")<CR>

" Capitalize word next to cursor
inoremap <C-u> <Esc>:call Preserve("normal gUiw")<CR>a

" Toggle fullscreen
if has("gui_running")
  nnoremap <F11> :call <SID>ToggleFullscreen()<CR>
endif

" Toggle `set list`
nmap <leader>l :set list!<CR>

" Yank to end of line
nnoremap Y y$

" Save file
nnoremap <Enter> :w<CR>

"}}}

"}}}
" Functions {{{

" Insert header preprocessor gates {{{

function! s:insert_gates()
  let gatename = substitute(toupper(expand("%:t")), "\\.", "_", "g")
  execute "normal! i#ifndef " .gatename
  execute "normal! o#define " .gatename
  execute "normal! Go#endif"
  normal! kk
endfunction

"}}}
" Save current position and execute command {{{

function! Preserve(command)
  " Save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")

  " Execute command
  execute a:command

  " Restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

"}}}
" Toggle fullscreen {{{

let s:fullscreen_on = 1

function! s:ToggleFullscreen()
  if s:fullscreen_on
    simalt ~P
    let s:fullscreen_on = 0
  else
    simalt ~s
    let s:fullscreen_on = 1
  endif
endfunction

"}}}

"}}}
" Autocommands {{{

" Relative numbers {{{

augroup relative_numbers
  autocmd!
  " Turn on relative numbers
  autocmd WinEnter            * set relativenumber
  autocmd BufNewFile,BufRead  * set relativenumber
  autocmd FocusGained         * set relativenumber
  autocmd InsertLeave         * set relativenumber

  " Turn off relative numbers
  autocmd WinLeave            * set norelativenumber
  autocmd FocusLost           * set norelativenumber
  autocmd InsertEnter         * set norelativenumber

augroup END

"}}}
" Other {{{

augroup other
  autocmd!
  autocmd BufWritePost vimrc source $MYVIMRC                         " Automatically source vimrc after saving
  autocmd BufNewFile,BufRead *.{h,hpp} call <SID>insert_gates()      " Automatically add header file getes
  autocmd CursorHoldI * stopinsert                                   " Stop insert mode after inactivity
  autocmd VimEnter * call <SID>ToggleFullscreen()                    " Set fullscreen on startup

  autocmd BufEnter,BufNew *.{c,cpp,h,hpp} compiler mingw
augroup END

"}}}

"}}}

" Math {{{

" :Calc
:command! -nargs=+ Calc :py print <args>
:py from cmath import *

" Insert mode math
ino <C-A> <C-O>yiW<End>=<C-R>=<C-R>0<CR>

"}}}

" Temporary mappings {{{

augroup temp
  autocmd!
  autocmd BufWritePost customized.vim colorscheme customized
augroup END
nnoremap <leader>vt :split $VIM/vimfiles/colors/customized.vim<CR>
noremap <leader>vr :edit $HOME/vimperator/vimperatorrc<CR>

"}}}

" End {{{
" vim: foldmethod=marker: foldlevel=0:
