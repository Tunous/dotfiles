"   ___      ___  __     ___      ___   _______    ______
"  |"  \    /"  ||" \   |"  \    /"  | /"      \  /" _  "\
"   \   \  //  / ||  |   \   \  //   ||:        |(: ( \___)
"    \\  \/. ./  |:  |   /\\  \/.    ||_____/   ) \/ \
"     \.    //   |.  |  |: \.        | //      /  //  \ _
"      \\   /    /\  |\ |.  \    /:  ||:  __   \ (:   _) \
"       \__/    (__\_|_)|___|\__/|___||__|  \___) \_______)
"

" {{{ General

set nocompatible
set encoding=utf-8 " Use UTF-8 for encoding

set viminfo+=n$XDG_CACHE_HOME/vim/viminfo

syntax on
filetype off

let mapleader = "," " Define <Leader> key

" }}}
" {{{ Plugins
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'a.vim'
Plugin 'baskerville/vim-sxhkdrc'
Plugin 'bling/vim-airline'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'gmarik/Vundle.vim'
Plugin 'gregsexton/gitv'
Plugin 'honza/vim-snippets'
Plugin 'inside/vim-search-pulse'
Plugin 'kien/ctrlp.vim'
Plugin 'nosami/omnisharp'
Plugin 'Raimondi/delimitMate'
Plugin 'scrooloose/syntastic'
Plugin 'SirVer/ultisnips'
Plugin 'svermeulen/vim-easyclip'
Plugin 'tommcdo/vim-exchange'
Plugin 'tomtom/tcomment_vim'
Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'Tunous/vim-colors-customized'
Plugin 'Valloric/YouCompleteMe'

call vundle#end()
filetype plugin indent on

" {{{ Plugin configs

" {{{ Airline
" -------------------------------------------------------------------------
let g:airline_left_sep=''
let g:airline_right_sep=''

" }}}
" {{{ DelimitMate
" -------------------------------------------------------------------------
" Turn on <Space> and <CR> expansion
let delimitMate_expand_cr = 2
let delimitMate_expand_space = 1

" Try to balance the closing pairs in the current line
let delimitMate_balance_matchpairs = 1

let delimitMate_nesting_quotes = ['"','`']

" }}}
" {{{ Easyclip
" -------------------------------------------------------------------------
" Use 's' for substitution
let g:EasyClipUseSubstituteDefaults = 1

" Use 'x' as cut operator
let g:EasyClipUseCutDefaults = 0
nmap x          <Plug>MoveMotionPlug
nmap X          <Plug>MoveMotionEndOfLinePlug
nmap xX         <Plug>MoveMotionReplaceLinePlug
nmap xx         <Plug>MoveMotionLinePlug
xmap x          <Plug>MoveMotionXPlug

" }}}
" {{{ Fugitive
" -------------------------------------------------------------------------
" Clean fugitive buffers
augroup fugitive
  autocmd!
  autocmd BufReadPost fugitive://* set bufhidden=delete
augroup END

" }}}
" {{{ Gitv
" -------------------------------------------------------------------------
" Don't map ctrl key - it conflicts with navigation mappings
let g:Gitv_DoNotMapCtrlKey = 1

" }}}
" {{{ UltiSnips
" -------------------------------------------------------------------------
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsEditSplit="vertical"

" }}}
" {{{ Search pulse
" -------------------------------------------------------------------------
let g:vim_search_pulse_mode = 'pattern'

" }}}
" {{{ Syntastic
" -------------------------------------------------------------------------
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libc++'

" }}}
" {{{ YouCompleteMe
" -------------------------------------------------------------------------
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_global_ycm_extra_conf = '~/src/cpp/.ycm_extra_conf.py'

" }}}

" }}}
" }}}
" {{{ Theme

set background=dark
let g:customized_use_xresources = 1
colorscheme customized

" }}}
" {{{ Setttings

" {{{ Bakcup, swap and undo files

set nobackup
set nowritebackup
set noswapfile
set undodir=$XDG_CACHE_HOME/vim/undofiles
set undofile

" }}}
" {{{ Search options

set hlsearch                        " Highlight search terms
set incsearch                       " Show search matches as I type
set ignorecase                      " Ignore case when searching...
set smartcase                       " unless I use uppercase characters

" }}}
" {{{ Command, status line

set wildmenu                        " Use wildmenu for autocompletion
set noshowmode                      " Don't show current mode
set laststatus=2                    " Always show statusline
set showcmd                         " See keystrokes

" }}}
" {{{ Tabs and indenting

set shiftwidth=4                    " Number of spaces to use for indenting
set softtabstop=4                   " Number of spaces that a <Tab> counts for
set tabstop=4                       " How much space takes tab
set expandtab                       " Convert tabs into spaces
set smartindent                     " Do smart autoindenting
set cindent
set autoindent

set cino=g2,i0

" }}}
" {{{ Timeout

set timeout timeoutlen=1000
set ttimeout ttimeoutlen=100

" }}}
" {{{ Other

set autochdir                       " Automatically change working directory
set autoread                        " Read file if it was modified outside
set backspace=2                     " Make <Backspace> work correctly
set clipboard=unnamedplus
set exrc
set fillchars=vert:│
set hidden                          " Allow hidden buffers
set list                            " Show list chars
set listchars=tab:▸\ ,trail:⋅
let &showbreak='↪'
set nowrap                          " Don't wrap lines
set scrolloff=10                    " Offset with the cursor when moving vertically
set sidescrolloff=15
set spell
set synmaxcol=300                   " Limit syntax highlight of long lines
set t_vb=
set visualbell                      " Don't beep and don't flash screen

call matchadd('ColorColumn', '\%81v', 100) " Show column 80 ONLY when necessary

" }}}

" }}}
" {{{ Mappings

" Surround character with spaces
nnoremap y<Space> a<Space><Esc>hi<Space><Esc>l

" Better navigation with wrapped lines
nnoremap j gj
nnoremap k gk

" Remove trailing whitespaces
nnoremap <F3> :call Preserve("%s/\\s\\+$//e")<CR>

" Open vimrc
nnoremap <Leader>v :edit $MYVIMRC<CR>

" Source vimrc
nnoremap <Leader>s :source $MYVIMRC<CR>

" Toggle fold
nnoremap <Space> za

" Toggle `set list`
nnoremap <Leader>l :set list!<CR>

" Turn off highlighting for current search
nnoremap // :nohlsearch<CR>

" }}}
" {{{ Functions

" {{{ Open files with ranger

function! RangerChooser()
  let temp = tempname()

  exec 'silent !ranger --choosefiles=' . shellescape(temp)

  if filereadable(temp)
    let names = readfile(temp)
    call delete(temp)

    if empty(names)
      return
    endif

    exec 'edit ' . fnameescape(names[0])

    for name in names[1:]
      exec 'argadd ' . fnameescape(name)
    endfor
  endif

  redraw!
endfunction

command! -bar RangerChooser call RangerChooser()
nnoremap <Leader>r :<C-U>RangerChooser<CR>

" }}}
" {{{ Return to last cursor position

function! s:SetCursorPosition()
  if &filetype !~ 'svn\|commit\c'
    if line("'\"") > 0 && line("'\"") <= line("$")
      exe "normal! g`\""
      normal! zz
    endif
  endif
endfunction

" }}}
" {{{ Save current position and execute command

function! Preserve(command)
  " Save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")

  " Execute command
  execute a:command

  " Restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" }}}

" }}}
" {{{ Autocommands

augroup Autocommands
  autocmd!
  " Spell check when writing commit logs
  autocmd FileType    svn,*commit* setlocal spell

  " Return to last cursor position
  autocmd BufReadPost * call <SID>SetCursorPosition()

  autocmd FileType    markdown,text setlocal wrap nolist linebreak
augroup END

" }}}

" vim: fdm=marker
