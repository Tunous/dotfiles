"   ___      ___  __     ___      ___   _______    ______
"  |"  \    /"  ||" \   |"  \    /"  | /"      \  /" _  "\
"   \   \  //  / ||  |   \   \  //   ||:        |(: ( \___)
"    \\  \/. ./  |:  |   /\\  \/.    ||_____/   ) \/ \
"     \.    //   |.  |  |: \.        | //      /  //  \ _
"      \\   /    /\  |\ |.  \    /:  ||:  __   \ (:   _) \
"       \__/    (__\_|_)|___|\__/|___||__|  \___) \_______)
"
" Main settings -----------------------------------------------------------
" Initial settings {{{

set nocompatible
set encoding=utf-8

language messages en_US.utf-8

filetype plugin indent on
syntax on

"}}}
" Theme settings {{{

set guifont=Inconsolata-dz_for_Powerline:h9:cEASTEUROPE   " Inconsolata font
set guifont=Meslo_LG_S_for_Powerline:h8:cANSI             " Meslo font

colorscheme customized                                    " Use my own theme
set background=dark                                       " Set dark background

"}}}
" Leader {{{

" Use ',' as leader
let mapleader=","

"}}}

" Plugins -----------------------------------------------------------------
" Vundle {{{

" Set paths {{{

set rtp+=$HOME/dotfiles/vim/bundle/vundle
call vundle#rc('$HOME/dotfiles/vim/bundle/')

"}}}

Bundle 'gmarik/vundle'

"}}}

" Airline {{{

" Nice looking statusline
Bundle 'bling/vim-airline'

" Symbols {{{

let g:airline_powerline_fonts = 1      " Poweline fonts
let g:airline_left_sep = ''           " Left separator
let g:airline_right_sep = ''          " Right separator
let g:airline_left_alt_sep = ''       " Alternative left separator
let g:airline_right_alt_sep = ''      " Alternative right separator

"}}}

" Show buffers line when there is only one tab open
let g:airline#extensions#tabline#enabled = 1

"}}}
" DelimitMate {{{

" Automatically close quotes, brackets, etc.
Bundle 'Raimondi/delimitMate'

let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1
let delimitMate_balance_matchpairs = 1

"}}}
" Fugitive {{{

" Use git inside of vim
Bundle 'tpope/vim-fugitive'

" Auto-clean fugitive buffers {{{

augroup fugitive
  autocmd!
  autocmd BufReadPost fugitive://* set bufhidden=delete
augroup END

"}}}

" }}}
" NERDTree {{{

Bundle 'scrooloose/nerdtree'

let NERDTreeDirArrows=1

" Close vim if only NERDTree is open {{{

augroup nerdTree
  autocmd!
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
augroup END

"}}}

nnoremap <Leader>t :NERDTreeToggle<CR>

"}}}
" Tabular {{{

" Line up text
Bundle 'godlygeek/tabular'

"}}}
" Tcomment {{{

" Comment selected text
Bundle 'tomtom/tcomment_vim'

"}}}

" Actual settings ---------------------------------------------------------
" Settting options {{{

" Bakcup and swap files {{{

set nobackup

silent execute '!mkdir "'.$VIM.'/temp" >nul 2>&1'
set directory=$VIM/temp//

"}}}
" Gui options {{{

" Don't use any gui options
if has("gui_running")
  set guioptions=
endif

"}}}
" Mouse {{{

" Can use mouse in all modes
if has("mouse")
  set mouse=a
endif

"}}}
" Search options {{{

set hlsearch                      " Highlight search terms
set incsearch                     " Show search matches as I type
set ignorecase                    " Ignore case when searching...
set smartcase                     " unless I use uppercase characters

"}}}
" Size {{{

set lines=50
set columns=175

"}}}
" Smart scrolling {{{

set scrolloff=10                  " Minimal number of screen lines to keep above or below cursor
set sidescrolloff=15              " Minimal number od screen linw to keep above or below cursor

"}}}
" Tabs and spaces {{{

set tabstop=4                     " Number of spaces for tab
set shiftwidth=2                  " Number of spaces to use for indenting
set softtabstop=2                 " Number of spaces that tab counts for
set expandtab                     " Use spaces instead of tabs
set autoindent                    " Always set autoindenting on
set copyindent                    " Copy the previous indentation on autoindenting

"}}}
" Undo files {{{

silent execute '!mkdir "'.$VIM.'/undofiles" >nul 2>&1'
set undodir=$VIM/undofiles
set undofile

"}}}"
" Other {{{

set wildmenu                      " Use wildmenu for commandline autocompletion

set autoread                      " Read file if it was modified outside of vim
set autochdir                     " Automatically change working directory to directory of current file

set hidden                        " Allow hidden buffers

set clipboard^=unnamed            " Share system clipboard

set showcmd                       " Show executed command in commands line

set cursorcolumn                  " Highlight cursor column...
set cursorline                    " ... and line

set backspace=indent,eol,start    " Make backspace delete everything in insert mode

set number                        " Show line numbers

set laststatus=2                  " Always show statusline

" Don't beep and don't flash screen
set visualbell
set t_vb=

set nowrap                        " Don't wrap lines

" Show list chars
set list
set listchars=tab:▸\ ,trail:·

set foldmethod=marker             " Use marker foldmethod

set synmaxcol=120                 " Limit syntax highlight of long lines

"}}}"

"}}}
" Key mappings {{{

" Buffers navigation {{{

nnoremap <Leader>p :bp<CR>
nnoremap <Leader>n :bn<CR>
nnoremap <Leader>b :ls<CR>:b<Space>
nnoremap <Leader>d :Bdelete<CR>

"}}}
" 'jk' to leave insert mode {{{

inoremap jk <Esc>
inoremap <Esc> Ooops, use jk instead...

"}}}
" Nvigation {{{

" Change windows
noremap <Up> <C-W>k
noremap <Down> <C-W>j
noremap <Left> <C-W>h
noremap <Right> <C-W>l

" Don't use arrow keys
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>

" Scroll page
noremap <Space> <C-D>
noremap <S-Space> <C-U>

"}}}
" Open config files {{{

" Open vimrc
nnoremap <Leader>vv :edit $HOME/dotfiles/vim/vimrc<CR>

" Open vimperatorrc
nnoremap <Leader>vp :edit $HOME/dotfiles/vimperator/vimperatorrc<CR>

" Open customized colorscheme
nnoremap <Leader>vt :edit $HOME/dotfiles/vim/colors/customized.vim<CR>

"}}}
" End semicolon {{{

inoremap <Leader>; <C-o>A;

"}}}
" Other {{{

" Change capitalization of word next to cursor
inoremap <C-u> <Esc>:call Preserve("normal g~iw")<CR>a

" Indend whole file and remove trailing whitespaces
nnoremap <F2> :call Preserve("normal gg=G")<CR> :call Preserve("%s/\\s\\+$//e")<CR>

" Save file
nnoremap <Enter> :w<CR>

" Toggle `set list`
nmap <Leader>l :set list!<CR>

" Turn off highlighting for current search
nnoremap <C-L> :nohlsearch<CR>

" Yank to end of line
nnoremap Y y$

"}}}

"}}}
" Functions {{{

" Delete current buffer without closing its split {{{

function! s:Bdelete(bang) abort
  let l:current_buffer = bufnr("%")
  let l:alternate_buffer = bufnr("#")

  if buflisted(l:alternate_buffer)
    execute "buffer" . a:bang . " #"
  else
    execute "bnext" . a:bang
  endif

  if bufnr("%") == l:current_buffer
    edit.
  endif

  if buflisted(l:current_buffer)
    execute "bdelete" . a:bang . " " . l:current_buffer
  endif
endfunction

if !exists(":Bdelete")
  command -bang -bar Bdelete call <SID>Bdelete(<q-bang>)
endif

"}}}
" Insert header preprocessor gates {{{

function! s:InsertCppGates()
  let gatename = substitute(toupper(expand("%:t")), "\\.", "_", "g")
  execute "normal! i#ifndef " .gatename
  execute "normal! o#define " .gatename
  execute "normal! Go#endif"
  normal! kk
endfunction

"}}}
" Return to last cursor position {{{

function! s:SetCursorPosition()
  if &filetype !~ 'svn\|commit\c'
    if line("'\"") > 0 && line("'\"") <= line("$")
      exe "normal! g`\""
      normal! zz
    endif
  end
endfunction

"}}}
" Save current position and execute command {{{

function! Preserve(command)
  " Save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")

  " Execute command
  execute a:command

  " Restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

"}}}
" Toggle fullscreen {{{

let s:fullscreen = 0

function! ToggleFullScreen()
  if s:fullscreen == 1
    let s:fullscreen = 0
    simalt ~P
  else
    let s:fullscreen = 1
    simalt ~s
  endif
endfunction

if has("gui_running")
  nnoremap <F11> :call ToggleFullScreen()<CR>
endif

"}}}

"}}}
" Autocommands {{{

" Relative numbers {{{

augroup relativeNumbers
  autocmd!
  " Turn on relative numbers
  autocmd WinEnter            * if &number | set relativenumber | endif
  autocmd BufNewFile,BufRead  * if &number | set relativenumber | endif
  autocmd FocusGained         * if &number | set relativenumber | endif
  autocmd InsertLeave         * if &number | set relativenumber | endif

  " Turn off relative numbers
  autocmd WinLeave            * if &number | set norelativenumber | endif
  autocmd FocusLost           * if &number | set norelativenumber | endif
  autocmd InsertEnter         * if &number | set norelativenumber | endif
augroup END

"}}}
" Other {{{

augroup other
  autocmd!
  " Source vimrc after saving and reopen folds
  autocmd BufWritePost vimrc source $MYVIMRC | :normal zv

  " Add header file preprocessor getes
  autocmd BufNewFile,BufRead *.{h,hpp} call <SID>InsertCppGates()

  " Stop insert mode after inactivity
  autocmd CursorHoldI * stopinsert

  " Select compiler for c/c++ files
  autocmd BufEnter,BufNew *.{c,cpp,h,hpp} compiler mingw

  " Spell check when writing commit logs
  autocmd filetype svn,*commit* setlocal spell

  " Return to last cursor position
  autocmd BufReadPost * call <SID>SetCursorPosition()
augroup END

"}}}
" Temporary {{{

augroup temp
  autocmd!
  autocmd BufWritePost customized.vim colorscheme customized
augroup END

"}}}

"}}}

" End {{{
" vim: foldmethod=marker: foldlevel=0:
