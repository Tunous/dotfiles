"   ___      ___  __     ___      ___   _______    ______
"  |"  \    /"  ||" \   |"  \    /"  | /"      \  /" _  "\
"   \   \  //  / ||  |   \   \  //   ||:        |(: ( \___)
"    \\  \/. ./  |:  |   /\\  \/.    ||_____/   ) \/ \
"     \.    //   |.  |  |: \.        | //      /  //  \ _
"      \\   /    /\  |\ |.  \    /:  ||:  __   \ (:   _) \
"       \__/    (__\_|_)|___|\__/|___||__|  \___) \_______)
"

" {{{1 General

set nocompatible
set encoding=utf-8 " Use UTF-8 for encoding

set viminfo+=n$XDG_CACHE_HOME/vim/viminfo

syntax on
filetype plugin indent on

let mapleader = " " " Define <Leader> key

" {{{1 Plugins

call plug#begin('~/.vim/bundle')

Plug 'bling/vim-airline'
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'inside/vim-search-pulse'
Plug 'tpope/vim-surround'
Plug 'baskerville/vim-sxhkdrc', { 'for': 'sxhkdrc' }
Plug 'scrooloose/syntastic'
Plug 'wellle/targets.vim'
Plug 'tomtom/tcomment_vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-unimpaired'
Plug 'Shougo/vimproc.vim', { 'do': 'make -f make_unix.mak' }
Plug 'junegunn/vim-pseudocl'
Plug 'junegunn/vim-oblique'
Plug 'nanotech/jellybeans.vim'

call plug#end()

" {{{2 Plugin configurations

" {{{3 Airline

let g:airline_left_sep = ''
let g:airline_right_sep = ''

" {{{3 DelimitMate

" Turn on <Space> and <CR> expansion
let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1

" Try to balance the closing pairs in the current line
let delimitMate_balance_matchpairs = 1

let delimitMate_nesting_quotes = ['"','`']

" {{{3 Fugitive

" Clean fugitive buffers
augroup fugitive
  autocmd!
  autocmd BufReadPost fugitive://* set bufhidden=delete
augroup END

" {{{3 Oblique

let g:oblique#incsearch_highlight_all = 1

nmap <CR> <Plug>Pulse

autocmd! User Oblique
autocmd! User ObliqueRepeat
autocmd  User Oblique       call search_pulse#Pulse()
autocmd  User ObliqueRepeat call search_pulse#Pulse()

" {{{3 Search pulse

let g:vim_search_pulse_mode = 'pattern'
let g:vim_search_pulse_disable_auto_mappings = 1

" {{{3 Syntastic

let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libc++'

" {{{1 Theme

set background=dark
colorscheme jellybeans

" {{{1 Setttings

" {{{2 Bakcup, swap and undo files

set nobackup
set nowritebackup
set noswapfile
set undodir=$XDG_CACHE_HOME/vim/undofiles
set undofile

" {{{2 Search options

set hlsearch                        " Highlight search terms
set incsearch                       " Show search matches as I type
set ignorecase                      " Ignore case when searching...
set smartcase                       " unless I use uppercase characters

" {{{2 Command, status line

set wildmenu                        " Use wildmenu for autocompletion
set noshowmode                      " Don't show current mode
set laststatus=2                    " Always show statusline
set showcmd                         " See keystrokes

" {{{2 Tabs and indenting

set shiftwidth=4                    " Number of spaces to use for indenting
set softtabstop=4                   " Number of spaces that a <Tab> counts for
set tabstop=4                       " How much space takes tab
set expandtab                       " Convert tabs into spaces
set smartindent                     " Do smart autoindenting
set cindent
set autoindent

set cino=g2,i0

" {{{2 Timeout

set timeout timeoutlen=1000
set ttimeout ttimeoutlen=100

" {{{2 Other

set autochdir                       " Automatically change working directory
set autoread                        " Read file if it was modified outside
set backspace=2                     " Make <Backspace> work correctly
set clipboard=unnamedplus
set exrc
set fillchars=vert:│
set hidden                          " Allow hidden buffers
set list                            " Show list chars
set listchars=tab:▸\ ,trail:⋅
let &showbreak='↪ '
set nowrap                          " Don't wrap lines
set scrolloff=10                    " Offset with the cursor when moving vertically
set sidescrolloff=15
set synmaxcol=300                   " Limit syntax highlight of long lines
set t_vb=
set visualbell                      " Don't beep and don't flash screen

" Show color column ONLY when necessary
call matchadd('ColorColumn', '\(\%81v\|\%100v\)', 100)

" {{{1 Mappings

" Surround character with spaces
nnoremap y<Space> a<Space><Esc>hi<Space><Esc>l

" Better navigation with wrapped lines
nnoremap j gj
nnoremap k gk

" Remove trailing whitespaces
nnoremap <F3> :call Preserve("%s/\\s\\+$//e")<CR>

" Open vimrc
nnoremap <Leader>v :edit $MYVIMRC<CR>

" Source vimrc
nnoremap <Leader>s :source $MYVIMRC<CR>

" Toggle fold
nnoremap <Space><Space> za

" Toggle `set list`
nnoremap <Leader>l :set list!<CR>

" Faster saving
nnoremap <Leader>w :w<CR>

" Execute q recording
nnoremap Q @q

" Redo
nnoremap U <C-r>

" Toggle spelling
nnoremap sp :set spell!<CR>

" {{{1 Functions

" {{{2 Open files with ranger

function! RangerChooser()
  let temp = tempname()

  exec 'silent !ranger --choosefiles=' . shellescape(temp)

  if filereadable(temp)
    let names = readfile(temp)
    call delete(temp)

    if empty(names)
      return
    endif

    exec 'edit ' . fnameescape(names[0])

    for name in names[1:]
      exec 'argadd ' . fnameescape(name)
    endfor
  endif

  redraw!
endfunction

command! -bar RangerChooser call RangerChooser()
nnoremap <Leader>r :<C-U>RangerChooser<CR>

" {{{2 Return to last cursor position

function! s:SetCursorPosition()
  if &filetype !~ 'svn\|commit\c'
    if line("'\"") > 0 && line("'\"") <= line("$")
      exe "normal! g`\""
      normal! zz
    endif
  endif
endfunction

" {{{2 Save current position and execute command

function! Preserve(command)
  " Save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")

  " Execute command
  execute a:command

  " Restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" {{{1 Autocommands

augroup Autocommands
  autocmd!
  " Spell check when writing commit logs
  autocmd FileType    svn,*commit* setlocal spell

  " Return to last cursor position
  autocmd BufReadPost * call <SID>SetCursorPosition()

  autocmd FileType    markdown,text setlocal wrap nolist linebreak spell
augroup END

" }}}

" vim: fdm=marker
