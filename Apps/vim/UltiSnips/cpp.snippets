snippet once "Include header only guard" 
#ifndef ${1:`!p
if not snip.c:
	import string
	snip.rv = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}${0}

#endif // $1

endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[]) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
	return EXIT_SUCCESS;
}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet if "if .. (if)"
if (${1:/* condition */}) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet ife "if .. else (ife)"
if (${1:/* condition */}) {
	${2:/* code */}
}
else {
	${3:/* else */}
}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename.capitalize() or "Name") + "_t"`} {
	${0:/* data */}
};
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}(${3}) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename.capitalize() or "Name"`} {
	public:
		${1/(\w+).*/$1/}(${2:arguments});
		virtual ~${1/(\w+).*/$1/}();

	private:
		${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename.capitalize() or "Name"`} {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet
