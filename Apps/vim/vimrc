"   ___      ___  __     ___      ___   _______    ______
"  |"  \    /"  ||" \   |"  \    /"  | /"      \  /" _  "\
"   \   \  //  / ||  |   \   \  //   ||:        |(: ( \___)
"    \\  \/. ./  |:  |   /\\  \/.    ||_____/   ) \/ \
"     \.    //   |.  |  |: \.        | //      /  //  \ _
"      \\   /    /\  |\ |.  \    /:  ||:  __   \ (:   _) \
"       \__/    (__\_|_)|___|\__/|___||__|  \___) \_______)
"
" Main settings -----------------------------------------------------------
" {{{ Initial settings

set nocompatible
set encoding=utf-8

language messages en_US.utf-8

filetype plugin indent on
syntax on

" }}}
" {{{ Leader

" Use ',' as leader
let mapleader=","

" }}}
" {{{ XDG Base Directory

set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
set runtimepath=$DOTFILES/Apps/vim,$VIM,$VIMRUNTIME
let $MYVIMRC="$DOTFILES/Apps/vim/vimrc"

" }}}

" Plugins -----------------------------------------------------------------
" {{{ Vundle

" {{{ Set paths

set rtp+=$DOTFILES/Apps/vim/bundle/vundle
call vundle#rc('$DOTFILES/Apps/vim/bundle/')

" }}}

Bundle 'gmarik/vundle'

" }}}

" {{{ Airline

" Nice looking statusline
Bundle 'bling/vim-airline'

" Use powerline symbols
let g:airline_powerline_fonts=1

" {{{ Bufferline

Bundle 'bling/vim-bufferline'

let g:bufferline_echo = 0

" }}}

" }}}
" {{{ DelimitMate

" Automatically close quotes, brackets, etc.
Bundle 'Raimondi/delimitMate'

let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1
let delimitMate_balance_matchpairs = 1

" }}}
" {{{ Easy align

Bundle 'junegunn/vim-easy-align'

vmap <CR>         <Plug>(EasyAlign)
vmap <Leader><CR> <Plug>(LiveEasyAlign)
nmap <Leader>a    <Plug>(EasyAlign)
nmap <Leader>A    <Plug>(LiveEasyAlign)

" }}}
" {{{ Easyclip

Bundle 'svermeulen/vim-easyclip'

let g:EasyClipUseCutDefaults = 0
let g:EasyClipUseSubstituteDefaults = 1

nmap x          <Plug>MoveMotionPlug
nmap X          <Plug>MoveMotionEndOfLinePlug
nmap xX         <Plug>MoveMotionReplaceLinePlug
nmap xx         <Plug>MoveMotionLinePlug

xmap x          <Plug>MoveMotionXPlug
imap <C-v><C-v> <Plug>EasyClipInsertModePaste

" }}}
" {{{ Fugitive

" Use git inside of vim
Bundle 'tpope/vim-fugitive'

" {{{ Auto-clean fugitive buffers

augroup fugitive
  autocmd!
  autocmd BufReadPost fugitive://* set bufhidden=delete
augroup END

" }}}

" }}}
" {{{ Gitv

Bundle 'gregsexton/gitv'

let g:Gitv_DoNotMapCtrlKey = 1

" }}}
" {{{ Relativity

Bundle 'Tunous/vim-relativity'

" }}}
" {{{ Repeat

Bundle 'tpope/vim-repeat'

" }}}
" {{{ Surround

Bundle 'tpope/vim-surround'

" }}}
" {{{ Sxhkdrc

Bundle 'baskerville/vim-sxhkdrc'

" }}}
" {{{ Tcomment

" Comment selected text
Bundle 'tomtom/tcomment_vim'

" }}}

" Actual settings ---------------------------------------------------------
" {{{ Theme settings - Customized colorscheme

Bundle 'Tunous/vim-colors-customized'

set t_Co=256
set background=dark
let g:customized_use_xresources = 1
colorscheme customized

" }}}
" {{{ Settting options

" {{{ Bakcup and swap files

" Don't create swap and backup files
set nobackup
set nowritebackup
set noswapfile

" }}}
" {{{ Mouse

" Can use mouse in all modes
if has("mouse")
  set mouse=a
endif

" }}}
" {{{ Search options

set hlsearch                      " Highlight search terms
set incsearch                     " Show search matches as I type
set ignorecase                    " Ignore case when searching...
set smartcase                     " unless I use uppercase characters

" }}}
" {{{ Smart scrolling

set scrolloff=10
set sidescrolloff=15

" }}}
" {{{ Tabs and spaces

set tabstop=4                     " Number of spaces for tab
set shiftwidth=2                  " Number of spaces to use for indenting
set softtabstop=2                 " Number of spaces that tab counts for
set expandtab                     " Use spaces instead of tabs
set autoindent                    " Always set autoindenting on
set copyindent                    " Copy the previous indentation on autoindenting

" }}}
" {{{ Undo files

set undodir=$XDG_CACHE_HOME/vim/undofiles
set undofile

" }}}
" {{{ Other

" Short timeout
set timeout
set timeoutlen=1000
set ttimeoutlen=100

set wildmenu                        " Use wildmenu for commandline autocompletion

set autoread                        " Read file if it was modified outside of vim
set autochdir                       " Automatically change working directory to directory of current file

set hidden                          " Allow hidden buffers

set showcmd                         " Show executed command in commands line

set cursorcolumn                    " Highlight cursor column...
set cursorline                      " ... and line

set backspace=indent,eol,start      " Make backspace delete everything in insert mode

set laststatus=2                    " Always show statusline

" Don't beep and don't flash screen
set visualbell
set t_vb=

set nowrap                          " Don't wrap lines

" Show list chars
set list
set listchars=tab:▸\ ,trail:·

set foldmethod=marker               " Use marker foldmethod

set synmaxcol=300                   " Limit syntax highlight of long lines

set clipboard^=unnamed,unnamedplus  " Use system clipboard

" }}}

" }}}
" {{{ Mappings

" {{{ Buffers navigation

nnoremap <Leader>N :bp<CR>
nnoremap <Leader>n :bn<CR>
nnoremap <Leader>b :ls<CR>:b<Space>
nnoremap <Leader>d :bd<CR>

" }}}
" {{{ Nvigation/Resizing

" Better navigation with wrapped lines
nnoremap j gj
nnoremap k gk

" Change windows
nnoremap <C-h> <C-W>h
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l

" Resize splits
nnoremap <Esc>h <C-W><
nnoremap <Esc>j <C-W>-
nnoremap <Esc>k <C-W>+
nnoremap <Esc>l <C-W>>

" Don't use arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>

" }}}
" {{{ Open config files

" Open vimrc
nnoremap <Leader>vv :edit $MYVIMRC<CR>

" Open vimperatorrc
nnoremap <Leader>vp :edit $HOME/.vimperator/vimperatorrc<CR>

" }}}
" {{{ Other

" Capitalize word next to cursor
inoremap <C-u> <Esc>:call Preserve("normal gUiw")<CR>a

" Indend whole file and remove trailing whitespaces
nnoremap <F2> :call Preserve("normal gg=G")<CR>
nnoremap <F3> :call Preserve("%s/\\s\\+$//e")<CR>

" Save file
nnoremap <CR> :w<CR>

" Source vimrc
nnoremap <Leader>s :source $MYVIMRC<CR>

" Toggle fold
nnoremap <Space> za

" Toggle `set list`
nmap <Leader>l :set list!<CR>

" Turn off highlighting for current search
nnoremap <Leader>h :nohlsearch<CR>

" Save with sudo
cmap w!! w !sudo tee > /dev/null %

" }}}

" }}}
" {{{ Functions

" {{{ Insert header preprocessor gates

function! s:InsertCppGates()
  let gatename = substitute(toupper(expand("%:t")), "\\.", "_", "g")
  execute "normal! i#ifndef " .gatename
  execute "normal! o#define " .gatename
  execute "normal! Go#endif"
  normal! kk
endfunction

" }}}
" {{{ Open files with ranger

function! RangerChooser()
  let temp = tempname()

  exec 'silent !ranger --choosefiles=' . shellescape(temp)

  if filereadable(temp)
    let names = readfile(temp)
    call delete(temp)

    if empty(names)
      return
    endif

    exec 'edit ' . fnameescape(names[0])

    for name in names[1:]
      exec 'argadd ' . fnameescape(name)
    endfor
  endif

  redraw!
endfunction

command! -bar RangerChooser call RangerChooser()
nnoremap <Leader>r :<C-U>RangerChooser<CR>

" }}}
" {{{ Return to last cursor position

function! s:SetCursorPosition()
  if &filetype !~ 'svn\|commit\c'
    if line("'\"") > 0 && line("'\"") <= line("$")
      exe "normal! g`\""
      normal! zz
    endif
  end
endfunction

" }}}
" {{{ Save current position and execute command

function! Preserve(command)
  " Save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")

  " Execute command
  execute a:command

  " Restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" }}}

" }}}
" {{{ Autocommands

augroup Autocommands
  autocmd!
  " Add header file preprocessor getes
  autocmd BufNewFile,BufRead *.{h,hpp} call <SID>InsertCppGates()

  " Spell check when writing commit logs
  autocmd filetype           svn,*commit* setlocal spell

  " Return to last cursor position
  autocmd BufReadPost        * call <SID>SetCursorPosition()

  autocmd FileType           markdown setlocal wrap nolist linebreak
augroup END

" }}}
