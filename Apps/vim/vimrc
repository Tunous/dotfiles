"   ___      ___  __     ___      ___   _______    ______
"  |"  \    /"  ||" \   |"  \    /"  | /"      \  /" _  "\
"   \   \  //  / ||  |   \   \  //   ||:        |(: ( \___)
"    \\  \/. ./  |:  |   /\\  \/.    ||_____/   ) \/ \
"     \.    //   |.  |  |: \.        | //      /  //  \ _
"      \\   /    /\  |\ |.  \    /:  ||:  __   \ (:   _) \
"       \__/    (__\_|_)|___|\__/|___||__|  \___) \_______)
"
" Main settings -----------------------------------------------------------
" {{{ Initial settings

set nocompatible
set encoding=utf-8

set viminfo+=n$XDG_CACHE_HOME/vim/viminfo

language messages en_US.utf-8

syntax on

" }}}
" {{{ Leader

" Use ',' as leader
let mapleader=","

" }}}

" Plugins -----------------------------------------------------------------
" {{{ Vundle

" {{{ Set paths

filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" }}}

Plugin 'gmarik/vundle'

" }}}

" {{{ Airline

" Nice looking statusline
Plugin 'bling/vim-airline'

" Use powerline symbols
let g:airline_powerline_fonts=1

" {{{ Bufferline

Plugin 'bling/vim-bufferline'

let g:bufferline_echo = 0

" }}}

" }}}
" {{{ Alternate files

Plugin 'a.vim'

" }}}
" {{{ DelimitMate

" Automatically close quotes, brackets, etc.
Plugin 'Raimondi/delimitMate'

let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1
let delimitMate_balance_matchpairs = 1

" }}}
" {{{ Easy align

Plugin 'junegunn/vim-easy-align'

vmap <CR>         <Plug>(EasyAlign)
vmap <Leader><CR> <Plug>(LiveEasyAlign)
nmap <Leader>a    <Plug>(EasyAlign)
nmap <Leader>A    <Plug>(LiveEasyAlign)

" }}}
" {{{ Easyclip

Plugin 'svermeulen/vim-easyclip'

let g:EasyClipUseCutDefaults = 0

nmap gs         <Plug>SubstituteOverMotionMap
nmap gss        <Plug>SubstituteLine
xmap gs         <Plug>XEasyClipPaste

nmap x          <Plug>MoveMotionPlug
nmap X          <Plug>MoveMotionEndOfLinePlug
nmap xX         <Plug>MoveMotionReplaceLinePlug
nmap xx         <Plug>MoveMotionLinePlug

xmap x          <Plug>MoveMotionXPlug
imap <C-v><C-v> <Plug>EasyClipInsertModePaste

" }}}
" {{{ Eunch 

Plugin 'tpope/vim-eunuch'

" }}} 
" {{{ Fugitive

" Use git inside of vim
Plugin 'tpope/vim-fugitive'

" {{{ Auto-clean fugitive buffers

augroup fugitive
  autocmd!
  autocmd BufReadPost fugitive://* set bufhidden=delete
augroup END

" }}}

" }}}
" {{{ Gitv

Plugin 'gregsexton/gitv'

let g:Gitv_DoNotMapCtrlKey = 1

" }}}
" {{{ Relativity

Plugin 'Tunous/vim-relativity'

let g:RelativityDisableNumberColumn = 1

" }}}
" {{{ Repeat

Plugin 'tpope/vim-repeat'

" }}}
" {{{ Sneak

Plugin 'justinmk/vim-sneak'
let g:sneak#use_ic_scs = 1
nmap s <Plug>SneakForward
nmap S <Plug>SneakBackward
xmap s <Plug>VSneakForward
xmap S <Plug>VSneakBackward

" }}}
" {{{ Surround

Plugin 'tpope/vim-surround'

" }}}
" {{{ Sxhkdrc

Plugin 'baskerville/vim-sxhkdrc'

" }}}
" {{{ Tcomment

" Comment selected text
Plugin 'tomtom/tcomment_vim'

" }}}
" {{{ Unimpaired

Plugin 'tpope/vim-unimpaired'

" }}}

" Actual settings ---------------------------------------------------------
" {{{ Theme settings

Plugin 'Tunous/vim-colors-customized'

set background=dark
let g:customized_use_xresources = 1
colorscheme customized

" }}}
" {{{ Setttings

filetype plugin indent on

" {{{ Bakcup, swap and undo files

set nobackup
set nowritebackup
set noswapfile
set undodir=$XDG_CACHE_HOME/vim/undofiles
set undofile

" }}}
" {{{ Search options

set hlsearch                        " Highlight search terms
set incsearch                       " Show search matches as I type
set ignorecase                      " Ignore case when searching...
set smartcase                       " unless I use uppercase characters

" }}}
" {{{ Cursor

set scrolloff=10
set sidescrolloff=15
set cursorcolumn                    " Highlight cursor column...
set cursorline                      " ... and line

" }}}
" {{{ Command, status line

set wildmenu                        " Use wildmenu for autocompletion
set noshowmode                      " Don't show current mode
set showcmd                         " Show last executed command
set laststatus=2                    " Always show statusline

" }}}
" {{{ Tabs and indenting

set tabstop=4                       " Number of spaces for tab
set shiftwidth=2                    " Number of spaces to use for indenting
set softtabstop=2                   " Number of spaces that tab counts for
set expandtab                       " Use spaces instead of tabs
set autoindent                      " Always set autoindenting on
set copyindent                      " Copy the previous indentation on autoindenting

" }}}
" {{{ Timeout

set timeout timeoutlen=1000
set ttimeout ttimeoutlen=100

" }}}
" {{{ Other

set mouse=a
set nostartofline                   " Keep cursor in the save column when moving
set autoread                        " Read file if it was modified outside of vim
set autochdir                       " Automatically change working directory to directory of current file
set hidden                          " Allow hidden buffers
set backspace=indent,eol,start      " Make backspace delete everything in insert mode
set visualbell                      " Don't beep and don't flash screen
set t_vb=
set nowrap                          " Don't wrap lines
set list                            " Show list chars
set listchars=tab:▸\ ,trail:·
set foldmethod=marker               " Use marker foldmethod
set synmaxcol=300                   " Limit syntax highlight of long lines
set clipboard^=unnamed,unnamedplus  " Use system clipboard

" }}}

" }}}
" {{{ Mappings

" {{{ Nvigation/Resizing

" Better navigation with wrapped lines
nnoremap j gj
nnoremap k gk

" Change windows
nnoremap <C-h> <C-W>h
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l

" Resize splits
nnoremap <Esc>h <C-W><
nnoremap <Esc>j <C-W>-
nnoremap <Esc>k <C-W>+
nnoremap <Esc>l <C-W>>

" Don't use arrow keys
noremap  <Up>    <NOP>
noremap  <Down>  <NOP>
noremap  <Left>  <NOP>
noremap  <Right> <NOP>
inoremap <Up>    <NOP>
inoremap <Down>  <NOP>
inoremap <Left>  <NOP>
inoremap <Right> <NOP>

" Buffers
nnoremap <Leader>b :ls<CR>:b<Space>
nnoremap <Leader>d :bd<CR>

" }}}
" {{{ Other

" Capitalize word next to cursor
inoremap <C-u> <Esc>:call Preserve("normal gUiw")<CR>a

" Indend whole file, remove trailing whitespaces
nnoremap <F2> :call Preserve("normal gg=G")<CR>
nnoremap <F3> :call Preserve("%s/\\s\\+$//e")<CR>

" Open vimrc
nnoremap <Leader>v :edit $MYVIMRC<CR>

" Source vimrc
nnoremap <Leader>s :source $MYVIMRC<CR>

" Toggle fold
nnoremap <Space> za

" Toggle `set list`
nmap <Leader>l :set list!<CR>

" Turn off highlighting for current search
nnoremap <Leader>h :nohlsearch<CR>

" }}}

" }}}
" {{{ Functions

" {{{ Open files with ranger

function! RangerChooser(action)
  let temp = tempname()

  exec 'silent !ranger --choosefiles=' . shellescape(temp)

  if filereadable(temp)
    let names = readfile(temp)
    call delete(temp)

    if empty(names)
      return
    endif

    if a:action ==? 'edit' || a:action ==? 'buffer'
      exec 'edit ' . fnameescape(names[0])
    elseif a:action ==? 'split'
      exec 'split ' . fnameescape(names[0])
    elseif a:action ==? 'vsplit'
      exec 'vsplit ' fnameescape(names[0])
    endif

    for name in names[1:]
      exec 'argadd ' . fnameescape(name)
    endfor
  endif

  redraw!
endfunction

command! -bar RangerChooserBuffer call RangerChooser('edit')
command! -bar RangerChooserSplit  call RangerChooser('split')
command! -bar RangerChooserVSplit call RangerChooser('vsplit')
nnoremap <Leader>r         :<C-U>RangerChooserBuffer<CR>
nnoremap <Leader>R         :<C-U>RangerChooserVSplit<CR>
nnoremap <Leader><Leader>r :<C-U>RangerChooserSplit<CR>

" }}}
" {{{ Return to last cursor position

function! s:SetCursorPosition()
  if &filetype !~ 'svn\|commit\c'
    if line("'\"") > 0 && line("'\"") <= line("$")
      exe "normal! g`\""
      normal! zz
    endif
  endif
endfunction

" }}}
" {{{ Save current position and execute command

function! Preserve(command)
  " Save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")

  " Execute command
  execute a:command

  " Restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" }}}

" }}}
" {{{ Autocommands

augroup Autocommands
  autocmd!
  " Spell check when writing commit logs
  autocmd filetype           svn,*commit* setlocal spell

  " Return to last cursor position
  autocmd BufReadPost        * call <SID>SetCursorPosition()

  autocmd FileType           markdown setlocal wrap nolist linebreak
augroup END

" }}}
