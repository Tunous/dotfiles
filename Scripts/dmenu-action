#!/bin/bash

# Get - Select one of available actions for dmenu from these below
Get() { # {{{
  if [[ -n "$1" ]]; then
    choice="$1"
  else
    choice="$(DGet -p "Select action" -o "Run\nWeb\nWallpaper\nPassword\nScreenshot\nSystem")"
  fi

  case $choice in
    [Rr]*) Run ;;
    [Ww]a*) Wallpaper ;;
    [Ww]*) Web ;;
    [Pp]*) Password ;;
    [Ss]y*) System ;;
    [Ss]*) Screen ;;
  esac
}
# }}}


# Actions -----------------------------------------------------------------

# DGet - Run dmenu or dmenu_run with specific options
DGet() { # {{{
  local arg prompt options file geometry
  color='#0087af'

  # Get options
  while getopts 'mo:p:f:c:' arg; do
    case $arg in
      p) prompt="$OPTARG" ;;
      o) options="$OPTARG" ;;
      f) file="$OPTARG" ;;
      m) geometry="-x 45 -w 300 -l 20" ;;
      c) 
        case $OPTARG in
          Red)     color='#af0000' ;;
          Green)   color='#87af00' ;;
          Yellow)  color='#af8700' ;;
          Orange)  color='#d75f00' ;;
          Blue)    color='#0087af' ;;
          Magenta) color='#af0057' ;;
          Cyan)    color='#00afaf' ;;
        esac
        ;;
      *) return 1
    esac
  done

  # Set dmenu arguments
  settings="-i -nb #000000 -nf #9e9e9e -sb "$color" -sf #000000"
  [[ -z "$geometry" ]] && geometry="-x 45 -w 800"

  # Run dmenu
  echo $(printf "$options" | cat - $file | dmenu -p "$prompt" $geometry $settings)
}
# }}}

# [r] Run - Execute program from $PATH
Run() { # {{{
  cachedir=${XDG_CACHE_HOME:-"$HOME/.cache"}
  mkdir -p "$cachedir" && cache=$cachedir/dmenu_run

  NORMIFS=$IFS
  IFS=:
  if stest -dqr -n "$cache" $PATH; then
    stest -flx $PATH | sort -u | tee "$cache"
  fi
  IFS=$NORMIFS

  term="no"

  while :; do
    choice="$(DGet -mp "Run program" -f "$cache" -o "[Terminal: $term]\n")"
    case $choice in
      "[Terminal: yes]")  term="no" ;;
      "[Terminal: no]")   term="yes" ;;
      ranger*|htop*|vim*) term="yes"; break ;;
      *) break ;;
    esac
  done

  if [[ "$term" = "no" ]]; then
    echo "$choice" | $SHELL &
  else
    urxvt -e $choice &
  fi
}
# }}}

# [w] Web - Open specified url in firefox or search for text in google
Web() { # {{{
  opt=$(DGet -p "Open url/Search in web") && [[ -n "$opt" ]] || return

  # If $opt looks like url try to open it. Otherwise search for it in google
  if [[ $opt  =~ ^.+\..+$ ]] && [[ ! $opt =~ \  ]]; then
    firefox "$opt" &
  else
    firefox "http://www.google.com/search?q=$opt" &
  fi
}
# }}}

# [wa] Wallpaper - Set random wallpaper from web
Wallpaper() { # {{{
    opt=$(DGet -mp "Select source" -o "random\nreddit\nimgur") && [[ -n "$opt" ]] || return

    case $opt in
        random) wallpaper --random ;;
        reddit) wallpaper --reddit ;;
        imgur) wallpaper --imgur ;;
    esac
}
# }}}

# [p] Password - Autotype selected password into focused window
# Options:
# [Tab|Return] - Key to be pressed after typing username
# [Username: yes|no] - Autotype username?
Password() { # {{{
  candidates="$(find "$PASSWORD_STORE_DIR" -name '*gpg' -print | sed "s,$PASSWORD_STORE_DIR/,,;s,\.gpg\$,," | sort)"
  key="Tab"
  usr="yes"

  # Select password/Set options
  while :; do
    if [[ $usr = yes ]]; then
      choice=$(DGet -mp "Select password" -o "[$key]\n[Username: $usr]\n$candidates" -c Yellow)
    else
      choice=$(DGet -mp "Select password" -o "[Username: $usr]\n$candidates" -c Yellow)
    fi
    [[ -z "$choice" ]] && return
    
    case $choice in
      "[Tab]")           key="Return" ;;
      "[Return]")        key="Tab"    ;;
      "[Username: yes]") usr="no"     ;;
      "[Username: no]")  usr="yes"    ;;
      *) break ;;
    esac
  done

  output="$(pass "$choice")"
  exit_code="$?"
  (( exit_code  > 0 )) && return

  # Set variables
  password="$(printf "%s" "$output" | head -n 1)"
  username="$(printf "%s" "$output" | grep '^username: ' | cut -c 11-)"

  # Autotype
  if [[ -n "$password" ]]; then
    if [[ -n "$username" && "$usr" == "yes" ]]; then
      xdotool type "$username"
      xdotool key "$key"
    fi

    xdotool type "$password"
    [[ -n "$username" && "$usr" == "yes" ]] && xdotool key "Return"
  fi
}
# }}}

# [s] Screen - Take screenshot with scrot
Screen() { # {{{
  choice=$(DGet -p "Take screenshot" -o "Fullscreen\nDelayed fullscreen\nSection" -c Orange) && [[ -n "$choice" ]] || return

  dir="$HOME/Dropbox"
  mkdir -p "$dir" && cd "$dir"

  case $choice in
    Fullscreen)          scrot -d 1 && notify-send 'Taken fullscreen screenshot' ;;
    Delayed\ fullscreen) scrot -d 5 && notify-send 'Taken fullscreen screenshot' ;;
    Section)             scrot -s   && notify-send 'Taken screenshot of selected secion' ;;
  esac
}
# }}}

# [sy] System - Preform system command
System() { # {{{
  choice=$(DGet -p "Select action" -o "Poweroff\nReboot\nLogout" -c Red) && [[ -n "$choice" ]] || return

  case $choice in
    Poweroff) systemctl poweroff ;;
    Reboot) systemctl reboot ;;
    Logout) pkill panel; bspc quit ;;
  esac
}
# }}}

# -------------------------------------------------------------------------

Get "$1"
