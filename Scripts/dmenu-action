#!/bin/bash

# Get - Select one of available actions for dmenu from these below
Get() { # {{{
  actions="Run\nWeb\nTranslate\nScreenshot\nPassword"

  if [[ -n "$1" ]]; then
    choice="$1"
  else
    choice="$(DGet -p "Select action" -o "$actions")"
  fi

  case $choice in
    [Rr]*) Run ;;
    [Ww]*) Web ;;
    [Tt]*) Translate ;;
    [Ss]*) Screen ;;
    [Pp]*) Password ;;
  esac
}
# }}}

# Actions -----------------------------------------------------------------

# DGet - Run dmenu or dmenu_run with specific options
DGet() { # {{{
  local arg prompt options multiline run settings geometry file

  # Get options
  while getopts 'mro:p:f:' arg; do
    case $arg in
      p) prompt="$OPTARG" ;;
      o) options="$OPTARG" ;;
      f) file="$OPTARG" ;;
      m) multiline=1 ;;
      *) return 1
    esac
  done

  # Set dmenu arguments
  settings="-i -nb #000000 -nf #9e9e9e -sb #0087af -sf #000000"
  [[ -n "$multiline" ]] && geometry="-x 45 -w 300 -l 20" || geometry="-x 45 -w 800"

  # Run dmenu
  if [[ -n "$file" ]]; then
    echo $(dmenu -p "$prompt" $geometry $settings < "$file")
  else
    echo $(printf "$options" | dmenu -p "$prompt" $geometry $settings)
  fi
}
# }}}

# [r] Run - Execute program from $PATH
Run() { # {{{
  cachedir=${XDG_CACHE_HOME:-"$HOME/.cache"}
  mkdir -p "$cachedir" && cache=$cachedir/dmenu_run

  (
    NORMIFS=$IFS
    IFS=:
    if stest -dqr -n "$cache" $PATH; then
      programs="$(stest -flx $PATH | sort -u | tee "$cache")"
      IFS=$NORMIFS
      DGet -mp "Run program" -o "$programs"
    else
      IFS=$NORMIFS
      DGet -mp "Run program" -f "$cache"
    fi
  ) | ${SHELL:-"/bin/sh"} &
}
# }}}

# [w] Web - Open specified url in firefox or search for text in google
Web() { # {{{
  opt=$(DGet -p "Open url/Search in web")
  [[ -z "$opt" ]] && return

  # If $opt looks like url try to open it. Otherwise search for it in google
  if [[ $opt  =~ ^.+\..+$ ]] && [[ ! $opt =~ \  ]]; then
    firefox "$opt" &
  else
    firefox 'http://www.google.com/search?q='"$opt" &
  fi
}
# }}}

# [t] Translate - Translate specified text from and to selected languages
Translate() { # {{{
  # Languages
  languages="auto\naf afrikaans\nsq albanian\nar arabic\naz azerbaijani\neu basque\nbn bengali\nbe belarusian\nbg bulgarian\nca catalan\nzh-cn chinese simplified\nzh-tw chinese traditional\nhr croatian\ncs czech\nda danish\nnl dutch\nen english\neo esperanto\net estonian\ntl filipino\nfi finnish\nfr french\ngl galician\nka georgian\nde german\nel greek\ngu gujarati\nht haitian creole\niw hebrew\nhi hindi\nhu hungarian\nis icelandic\nid indonesian\nga irish\nit italian\nja japanese\nkn kannada\nko korean\nla latin\nlv latvian\nlt lithuanian\nmk macedonian\nms malay\nmt maltese\nno norwegian\nfa persian\npl polish\npt portuguese\nro romanian\nru russian\nsr serbian\nsk slovak\nsl slovenian\nes spanish\nsw swahili\nsv swedish\nta tamil\nte telugu\nth thai\ntr turkish\nuk ukrainian\nur urdu\nvi vietnamese\ncy welsh\nyi yiddish"

  sl=$(DGet -mp "Source language" -o "$languages")
  [[ -z "$sl" ]] && return

  tl=$(DGet -mp "Target language" -o "$languages")
  [[ -z "$tl" ]] && return

  slong="${sl##* }"; sshort="${sl%% *}"
  tlong="${tl##* }"; tshort="${tl%% *}"

  # Text to translate
  text=$(DGet -p "Translate $slong to $tlong")

  [[ -z "$text" ]] && return

  # Translation
  if ! hash translate 2>/dev/null; then
    firefox 'http://www.translate.google.com/?'"&sl=${sl%% *}&tl=${tl%% *}&text=$opt"
  else
    translation="$(translate "{$sshort=$tshort}" "$text")"
    notify-send "Translated from $slong to $tlong" "\n<b>Original text:</b>\n$text\n\n<b>Translation:</b>\n$translation"
  fi
}
# }}}

# [s] Screen - Take screenshot with scrot
Screen() { # {{{
  options="Fullscreen\nDelayed fullscreen\nSection"
  choice=$(DGet -p "Take screenshot" -o "$options")
  [[ -z "$choice" ]] && return

  dir="$HOME/Dropbox"
  mkdir -p "$dir" && cd "$dir"

  case $choice in
    Fullscreen)          scrot -d 1 && notify-send 'Taken fullscreen screenshot' ;;
    Delayed\ fullscreen) scrot -d 5 && notify-send 'Taken fullscreen screenshot' ;;
    Section)             scrot -s   && notify-send 'Taken screenshot of selected secion' ;;
  esac
}
# }}}

# [p] Password - Autotype selected password into focused window
Password() { # {{{
  # Autotyping method
  option="$(DGet -p "Select autotype method" -o "Tab after username\nReturn after username\nNo username")"
  [[ ! "$option" =~ ^(Tab .*|Return .*|No username)$ ]] && return

  # Select password
  candidates="$(find "$PASSWORD_STORE_DIR" -name '*gpg' -print | sed "s,$PASSWORD_STORE_DIR/,,;s,\.gpg\$,," | sort)"
  choice=$(DGet -mp "Select password" -o "$candidates")
  [[ -z "$choice" ]] && return

  output="$(pass "$choice")"
  exit_code="$?"
  (( exit_code  > 0 )) && return

  # Set variables
  password="$(printf "%s" "$output" | head -n 1)"
  username="$(printf "%s" "$output" | grep '^username: ' | cut -c 11-)"

  # Autotype
  if [[ -n "$password" ]]; then
    if [[ -n "$username" && "$option" != "No username" ]]; then
      xdotool type "$username"
      xdotool key "${option%% *}"
    fi

    xdotool type "$password"
    xdotool key "Return"
  fi
}
# }}}

# -------------------------------------------------------------------------

Get "$1"
